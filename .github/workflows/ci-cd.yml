name: CI/CD Pipeline

on:
  push:
    branches: 
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest coverage
    
    - name: Run tests with pytest
      run: |
        pytest tests/ --cov=./ --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: .
        push: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' }}
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/myapp:${{ github.sha }}
          ${{ secrets.DOCKERHUB_USERNAME }}/myapp:${{ github.ref == 'refs/heads/main' && 'latest' || 'dev' }}

  deploy-dev:
    needs: build
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: 
      name: development
    
    steps:
    - name: Deploy to Development
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEV_SERVER_HOST }}
        username: ${{ secrets.DEV_SERVER_USER }}
        key: ${{ secrets.DEV_SERVER_SSH_KEY }}
        script: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/myapp:dev
          docker stop myapp-dev || true
          docker rm myapp-dev || true
          docker run -d --name myapp-dev \
            -p 8080:8080 \
            -e ENV=development \
            ${{ secrets.DOCKERHUB_USERNAME }}/myapp:dev

  deploy-staging:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: 
      name: staging
    
    steps:
    - name: Deploy to Staging
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.STAGING_SERVER_HOST }}
        username: ${{ secrets.STAGING_SERVER_USER }}
        key: ${{ secrets.STAGING_SERVER_SSH_KEY }}
        script: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest
          docker stop myapp-staging || true
          docker rm myapp-staging || true
          docker run -d --name myapp-staging \
            -p 8081:8080 \
            -e ENV=staging \
            ${{ secrets.DOCKERHUB_USERNAME }}/myapp:latest

  # Optional: Send Slack Notification
  notify:
    needs: [deploy-dev, deploy-staging]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Send Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}